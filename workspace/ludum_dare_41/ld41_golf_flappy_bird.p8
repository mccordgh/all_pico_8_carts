pico-8 cartridge // http://www.pico-8.com
version 15
__lua__
--flaps as strokes
function _init()
    init_game()
    init_ball()
    init_player()
end

function init_game()
    collided = false
    padd = 2

    gravity = 0.25
    wind = 0.15
    friction = 0.05
    meter_speed = .05
    
    power = 0
    max_power = 8
    draw_power = true
    power_meter_speed = max_power * meter_speed
    
    lift = 0
    max_lift = 5.6
    draw_lift = true
    lift_meter_speed = max_lift * meter_speed

    do_draw_meter = true
    landed = false
    hitting_ball = false
    flapping = false
    level_finish = false
    tree_collide = false
    x_hit = false
    y_hit = false

    state = menu_state
    draw_state = draw_menu
    --state = hitting_state
end

function menu_state()
    if (btnp(4)) then
        state = init_level
        draw_state = draw_game
    end
end

function init_level()
    trees = {}
    make_trees(150, 100)
    
    state = hitting_state
end

function make_trees(start_pos, spacing)
    local xx = start_pos
    local yy = -6

    while (xx < 966) do
        local tree_spacing = 40
        local spacer = rnd(tree_spacing) - (tree_spacing / 2)
        local t1 = make_tree()
        local t2 = make_tree()

        t1.x = xx
        t1.y = yy + spacer
        t1.tree_flip = true

        t2.x = xx
        t2.y = yy + spacer + 78
        t2.tree_flip = false
        
        add(trees, t1)
        add(trees, t2)

        xx += spacing
    end
end

function make_tree()
    local t = {}

    t.spr_xpos = 0
    t.spr_ypos = 8
    t.spr_width = 8
    t.spr_height = 16
    t.x_stretch = 48
    t.y_stretch = 56

    t.x = xx
    t.y = yy

    return t
end

function _update()
    state()
end

function _draw()
    cls()
    draw_state()
end

function draw_game()
    set_camera()

    map(0, 0, 0, 0, 128, 16)

    sspr(player.sprite * 8, 0, 8, 8, player.x, player.y, 48, 48)

    draw_trees()
    
    spr(ball.sprite, ball.x, ball.y)

    if (do_draw_meter) then
        draw_all_meters()
    end
    
    debug_info()

    if (collided) then
        print("try again!!", cam_x + 60, 30, 8)
    end

    if (level_finish) then
        print("you win, guy!!", cam_x + 60, 30, 11)
    end
end

function draw_all_meters()
    draw_meter_box()

    if (draw_power) then
        local power_percent = (power / max_power) * 100
        if (power_percent > 100) then
            power_percent = 100
        end
        print ("p o w e r ", cam_x + 29, 58, 14)
        rectfill(cam_x + 20, 50, cam_x + 20 + (power_percent / 2), 56, 14)
    end

    if (draw_lift) then
        local lift_percent = (lift / max_lift) * 100
        if (lift_percent > 100) then
            lift_percent = 100
        end
        print ("l", cam_x + 19, 12, 9)
        print ("i", cam_x + 19, 20, 9)
        print ("f", cam_x + 19, 28, 9)
        print ("t", cam_x + 19, 36, 9)
        rectfill(cam_x + 10, 56 - (lift_percent / 2), cam_x + 16, 56, 9)
    end 
end

function draw_trees()
    for tr in all(trees) do
        sspr(tr.spr_xpos, tr.spr_ypos, tr.spr_width, tr.spr_height, tr.x, tr.y, tr.x_stretch, tr.y_stretch,  tr.tree_flip, tr.tree_flip)    
    end
end

function draw_menu()
    print("[insert title bub]", 50, 30, 15)
    print("press z to start", 40, 50, 15)
end

function draw_meter_box()
    rectfill(cam_x + 8, 4, cam_x + 72, 64, 0)
    --print ("press z to stop", 39, 56, 15)    
end

function init_ball()
    ball = {}
    ball.x = 48
    ball.x_speed = 0
    ball.y = 108
    ball.y_speed = 0
    ball.width = 8
    ball.height = 8
    ball.sprite = 3
end

function init_player()
    player = {}
    player.x = ball.x - 44
    player.y = ball.y - 40
    player.sprite = 13
    player.frame_count = 0
    player.frame = 0
    player.frame_spd = 6
    player.power = -1
    player.lift = -1
    --player.power = max_power / 2
    --player.lift = max_lift / 2
end

function hitting_state()
if ((not hitting_ball) and (not landed)) then
        not_hitting()
    else
        hitting()
    end
end

function landed_state()

end

function power_meter()
    power += power_meter_speed

    if (btnp(4)) then
        if (power > max_power) then
            power = max_power
        end
        if (power < 1) then
            power = 1
        end
        player.power = power
    end

    if (power >= max_power + (max_power * .05)) then
        power = 0
    end
end

function lift_meter()
    lift += lift_meter_speed

    if (btnp(4)) then
        if (lift > max_lift) then
            lift = max_lift
        end
        if (lift < 1) then
            lift = 1
        end
        player.lift = lift
    end

    if (lift >= max_lift + (max_lift * .05)) then
        lift = 0
    end
end

function not_hitting()
    if (player.power == -1) then
        power_meter()
    else if (player.lift == -1) then
        lift_meter()
    else
        lift = 0
        power = 0
        swing_animate()
    end
    end
end

function swing_animate()
    player.frame_count += 1

    if (player.frame_count == player.frame_spd) then
        player.frame += 1
        player.frame_count = 0

        if (player.frame == 1) then
            player.sprite = 14
        end

        if (player.frame == 2) then
            player.sprite = 15
        end

        if (player.frame == 3) then
            player.sprite = 14
        end

        if (player.frame == 4) then
            player.sprite = 13

            hitting_ball = true
            do_draw_meter = false

            ball.x_speed = player.power
            ball.y_speed = player.lift
        end
    end
end

function hitting()
    if (flapping and btnp(4) and (not landed) and (not collided)) then
        flap()
    end

    if (landed and (collided or ball.x_speed == 0)) then
        hitting_ball = false
        landed = false
    end

    ball_collision()
    apply_ball_force()
    apply_physics()
end

function tree_collision()
    x_hit = false
    y_hit = false
    
    for tr in all(trees) do
        if ((ball.x > tr.x) and (ball.x < tr.x + (tr.x_stretch - padd))) 
        and (ball.y > tr.y) and (ball.y < tr.y + (tr.y_stretch - padd)) then
            tree_collide = true
            ball.sprite = 3
            --FIX DELETION
            del(trees, tr)
        end

        --if ((ball.y > tr.y) and (ball.y < tr.y + (tr.y_stretch - padd))) then
         --   y_hit = true
        --end
    end

    --tree_collide = x_hit and y_hit
end

function ball_collision()
    tree_collision()
    
    if (ball.x + ball.width > 1016) then
        ball.x_speed = 0
        level_finish = true
    end
    
    if (tree_collide) then
        init_player()
        collided = true
        ball.x_speed = 0
    end

    if (ball.y > 108) then
        ball.y_speed = 0
        ball.y = 108
    end

    if (ball.y == 108) then
        if (ball.x_speed == 0) then
            hitting_ball = false
            do_draw_meter = true
        else
            ball.x_speed -= friction
        end
    end

    if ((not landed) and (not collided) and btnp(4)) then
        flapping = true
        ball.sprite = 4
        wind /= 2
        flap()
    end
end

function apply_ball_force()
    ball.x += ball.x_speed

    if (not landed) then
        ball.y -= ball.y_speed
    end
end

function flap()
    if (ball.y > 8) then
        ball.y_speed = 2
        ball.x_speed = 1.5
    end
end

function apply_physics()
    ball.x_speed -= wind
    
    if (not landed) then
        ball.y_speed -= gravity
    end

    if (ball.x_speed < 0) then
        ball.x_speed = 0
    end

    if (ball.y > 108) then
        ball.y_speed = 0
        ball.y = 108
        landed = true
    end
end

function to_string(str)
    if (str) then
        return "true"
    end

    return "false"
end

function debug_info()
    --print("collided: " .. to_string(collided), cam_x + 50, 10, 15)
    --print("ball x: " .. ball.x .. ", y: " .. ball.y, cam_x + 10, 20, 15)
    --print("ball speed x: " .. ball.x_speed .. ", y: " .. ball.y_speed, cam_x + 10, 30, 15)
    --print("pow: " .. power, cam_x + 10, 10, 15)
    --print("lift: " .. lift, cam_x + 10, 20, 15)
    --print("landed: true", cam_x + 70, 20, 15)
    --print("x_hit: " .. to_string(x_hit), cam_x + 50, 50, 15)
    --print("y_hit: " .. to_string(y_hit), cam_x + 50, 70, 15)
end

function set_camera()
    if (ball.x - 64 < 0) then
        cam_x = 0
    else if (ball.x + ball.width > 966) then
        cam_x = 894
    else
        cam_x = ball.x - 64
    end
    end

    camera(cam_x, 0)
end
__gfx__
00000000ccccccccbbbbbbbb00000000000000003333333333333333333b333333333333cccccccccccccccccccccccccccccccc00000a0000000a0000000a00
00000000ccccccccbbbbbbbb000ff0000000000033333333333333333333333333333333cccccccccccccccccccccccccccccccc00000f0000000f0000000f00
00700700ccccccccbbbbbbbb00ffff00000870003333333b333333333333333333333333cccccccccccc66cccccccccccccccccc000088800000888000008880
00077000ccccccccbbbbbbbb0fff77f000088a003b3333b3b333333333333b333b333333cccccccc6666666ccccccccccccccccc00008f8000008f8006008880
00077000ccccccccbbbbbbbb0ffff7f00802808033b33333333333b33b3333b33333333bccccccc666667666cccccccccccccccc0000f8000000f8000066ff00
00700700ccccccccbbbbbbbbfffffffff082880f3333333333333333b333333333333333ccccccc666667766cccccccccccccccc000061000006010000000100
00000000ccccccccbbbbbbbb0ffffff00ff88ff033333333333333333333333333333333ccccccc666666776cccccccccccccccc000006000660010000000100
00000000ccccccccbbbbbbbb00ffff0000ffff003333b333333333333333333333333333ccccccc666666676cccccccccccccccc000004600000040000000400
03333330000000000000000000000000000000003333333333b3b3330000000000000000cccccc666666666666666666666666cc000000000000000000000000
333333b30000000000000000000000000000000033b33333333b33330000000000000000cc66666666666666666666666666666c000000000000000000000000
333b3b330000000000000000000000000000000033333333333333330000000000000000c666666666666666666666666666666c000000000000000000000000
333333b30000000000000000000000000000000033333333333333330000000000000000c666666666666666666666666666666c000000000000000000000000
333b3b330000000000000000000000000000000022222222222222220000000000000000c666666666666666666666666666666c000000000000000000000000
333333b300000000000000000000000000000000424444f4444444440000000000000000c666666666666666666666666666666c000000000000000000000000
33333b33000000000000000000000000000000004f442444244424420000000000000000cc6666666666666666666666666666cc000000000000000000000000
033333300000000000000000000000000000000044244424442f44240000000000000000cccccccccccccccccccccccccccccccc000000000000000000000000
03444f30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00441f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00441f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00444f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00444f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00444f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
040000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4000000f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000001000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101090a0b0c010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101090a0b0c01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101191a1b1c010101010101010101010101010101010101
010101010101010101010101090a0b0c01010101010101010101010101010101010101191a1b1c0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
010101010101010101010101191a1b1c01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101090a0b0c0101010101010101010101010101090a0b0c0101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101010101090a0b0c0101010101010101010101010101010101010101010101010101010101191a1b1c0101010101010101010101010101191a1b1c0101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101010101191a1b1c0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101090a0b0c010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101090a0b0c01010101
0101010101191a1b1c0101010101010101010101010101090a0b0c01010101010101010101010101010101010101010101010101010101010101010101090a0b0c01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101191a1b1c01010101
0101010101010101010101010101010101010101010101191a1b1c01010101010101010101010101010101010101010101010101010101010101010101191a1b1c010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0707080708070807080708070807080708070807080708070807070807080708070807080708070807080708070807080708070807080708070807070807080708070807080708070807080708070708070807080708070807080708070807080708070807080708070708070807080707080708070807080707080708070807
0605060506050606050605060506050605060506050605060506060506050605060506050605060506050605060605060506050605060506050605060506050605060506050605060506050605060506050605060506050606050605060506050605060506050605060506050605060506050506050605060506050605060506
1615161516151616151615161516151615161516151615161516161516151615161516151615161516151615161615161516151615161516151615161516151615161516151615161516151615161516151615161516151616151615161516151615161516151615161516151615161516151516151615161516151615161516
